generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum QuestionType {
  SINGLE_LINE_TEXT
  MULTI_LINE_TEXT
  INTEGER
  CHECKBOX
  SINGLE_CHOICE
}

enum TemplateAccess {
  PUBLIC
  RESTRICTED
}

enum Language {
  EN
  ES // Example: Spanish as second language
}

enum Theme {
  LIGHT
  DARK
}

model User {
  id            String      @id @default(uuid())
  email         String      @unique
  password      String
  name          String
  role          UserRole    @default(USER)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  templates     Template[]
  forms         Form[]
  comments      Comment[]
  likes         Like[]
  isActive      Boolean     @default(true)
  accessTemplates Template[] @relation("TemplateAccess")
  language      Language    @default(EN)
  theme         Theme       @default(LIGHT)
  socialAuthId  String?     @unique
  socialAuthProvider String?
  blocked       Boolean     @default(false)
}

model Template {
  id            String      @id @default(uuid())
  title         String
  description   String
  topic         String
  imageUrl      String?
   access        TemplateAccess @default(PUBLIC)  
  isPublic      Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  author        User        @relation(fields: [authorId], references: [id])
  authorId      String
  questions     Question[]
  forms         Form[]
  comments      Comment[]
  likes         Like[]
  tags          Tag[]
  accessType    TemplateAccess @default(PUBLIC)
  allowedUsers  User[]      @relation("TemplateAccess")
}

model Question {
  id            String      @id @default(uuid())
  title         String
  description   String?
  type          QuestionType
  isRequired    Boolean     @default(false)
  showInTable   Boolean     @default(true)
  order         Int
  options       String[]    // For SINGLE_CHOICE type
  template      Template    @relation(fields: [templateId], references: [id])
  templateId    String
  answers       Answer[]
}

model Form {
  id            String      @id @default(uuid())
  template      Template    @relation(fields: [templateId], references: [id])
  templateId    String
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  answers       Answer[]
  sendEmailCopy Boolean     @default(false)
}

model Answer {
  id            String      @id @default(uuid())
  question      Question    @relation(fields: [questionId], references: [id])
  questionId    String
  form          Form        @relation(fields: [formId], references: [id])
  formId        String
  textValue     String?
  integerValue  Int?
  booleanValue  Boolean?
}

model Comment {
  id            String      @id @default(uuid())
  content       String
  createdAt     DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  template      Template    @relation(fields: [templateId], references: [id])
  templateId    String
}

model Like {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  template      Template    @relation(fields: [templateId], references: [id])
  templateId    String
  createdAt     DateTime    @default(now())

  @@unique([userId, templateId])
}

model Tag {
  id            String      @id @default(uuid())
  name          String      @unique
  templates     Template[]
}